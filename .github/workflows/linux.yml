name: linux

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - cxx: g++-8
            cc: gcc-8
            conan_compiler: gcc
            build_type: Debug
            std: 14
            install: sudo apt install g++-8
            os: ubuntu-18.04
          - cxx: g++-10
            cc: gcc-10
            conan_compiler: gcc
            build_type: Debug
            std: 17
            os: ubuntu-18.04
          - cxx: g++-11
            cc: gcc-11
            conan_compiler: gcc
            build_type: Debug
            std: 20
            os: ubuntu-20.04
            install: sudo apt install g++-11
          - cxx: clang++-9
            cc: clang-9
            conan_compiler: clang
            build_type: Debug
            std: 17
            os: ubuntu-18.04
          - cxx: clang++-11
            cc: clang-11
            conan_compiler: clang
            build_type: Debug
            std: 20
            os: ubuntu-20.04
          - cxx: clang++-11
            cc: clang-11
            conan_compiler: clang
            build_type: Debug
            std: 20
            cxxflags: -stdlib=libc++
            os: ubuntu-20.04
            install: sudo apt install libc++-11-dev libc++abi-11-dev

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: |
        ${{matrix.install}}
        sudo apt update
        sudo apt install locales-all
        pip3 install conan
        cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure
      working-directory: ${{runner.workspace}}/build
      env:
        CC: ${{matrix.cc}}
        CXX: ${{matrix.cxx}}
        CXXFLAGS: ${{matrix.cxxflags}}
      run: |
        conan install -s build_type=${{matrix.build_type}} -s compiler=${{matrix.conan_compiler}} $GITHUB_WORKSPACE
        cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
              -DCMAKE_CXX_STANDARD=${{matrix.std}} \
              $GITHUB_WORKSPACE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: |
        threads=`nproc`
        cmake --build . --config ${{matrix.build_type}} --parallel $threads

    - name: Test
      working-directory: ${{runner.workspace}}/build
      run: ctest -C ${{matrix.build_type}}
      env:
        CTEST_OUTPUT_ON_FAILURE: True
